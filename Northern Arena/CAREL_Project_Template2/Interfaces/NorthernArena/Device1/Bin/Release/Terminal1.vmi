VM_JSR _Move_DOWN_
VM_WORD_DIR 65535
VM_JSR _Move_UP_
VM_WORD_DIR 65535
VM_JSR _BoolSwap_
VM_WORD_DIR 65535
VM_JSR _SetCurrentValue_
VM_WORD_DIR 65535
VM_JSR _Increment_BYTE_
VM_WORD_DIR 65535
VM_JSR _Decrement_BYTE_
VM_WORD_DIR 65535
VM_JSR _Increment_WORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_WORD_
VM_WORD_DIR 65535
VM_JSR _Increment_DWORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_DWORD_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_1_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_1_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_2_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_2_
VM_WORD_DIR 65535
VM_JSR _TIMED_LOOP_
VM_WORD_DIR 65535
VM_JSR _Lang_UP_
VM_WORD_DIR 65535
VM_JSR _CheckActiveAlarm_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_DOWN_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_UP_
VM_WORD_DIR 65535
VM_JSR _ResetSingleAlarm_
VM_WORD_DIR 65535
VM_JSR _ResetGlobalAlarm_
VM_WORD_DIR 65535
VM_JSR _gotoAlarmLog_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_UP_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_DOWN_
VM_WORD_DIR 65535
VM_JSR _DeleteAlarmLog_
VM_WORD_DIR 65535
VM_JSR _ClearAutoResetCounter_
VM_WORD_DIR 65535
VM_JSR _QuickMenuUP_
VM_WORD_DIR 65535
VM_JSR _QuickMenuDOWN_
VM_WORD_DIR 65535
VM_JSR _QuickMenuENT_
VM_WORD_DIR 65535
VM_JSR _GotoMainMenu_
VM_WORD_DIR 65535
VM_JSR _SelMainMenu_
VM_WORD_DIR 65535
VM_JSR _GotoMain_
VM_WORD_DIR 65535
VM_JSR _SelSettingsMenu_
VM_WORD_DIR 65535
VM_JSR _GlobalEsc_
VM_WORD_DIR 65535
VM_JSR _ScrollMenuDown_
VM_WORD_DIR 65535
VM_JSR _ScrollMenuUp_
VM_WORD_DIR 65535
VM_JSR _PwdLogIn_
VM_WORD_DIR 65535
VM_JSR _PwdLogOut_
VM_WORD_DIR 65535
VM_JSR _ChgPwd_
VM_WORD_DIR 65535
VM_JSR _DummyService_
VM_WORD_DIR 65535
VM_JSR _DummyManuf_
VM_WORD_DIR 65535
VM_JSR _DummyManufOnOff_
VM_WORD_DIR 65535
VM_JSR _EscDummyService_
VM_WORD_DIR 65535
VM_JSR _EscDummyManuf_
VM_WORD_DIR 65535
VM_JSR _IncrDig_
VM_WORD_DIR 65535
VM_JSR _DecrDig_
VM_WORD_DIR 65535
VM_JSR _ParamImpExp_
VM_WORD_DIR 65535
VM_JSR _AlrmExp_
VM_WORD_DIR 65535
VM_JSR _EnDateChg_
VM_WORD_DIR 65535
VM_JSR _TZUp_
VM_WORD_DIR 65535
VM_JSR _TZDwn_
VM_WORD_DIR 65535
VM_JSR _OnOffSwitch_
VM_WORD_DIR 65535
VM_JSR _DoNothing_
VM_WORD_DIR 65535
VM_JSR _WipeMem_
VM_WORD_DIR 65535
VM_JSR _SetTimeZone_
VM_WORD_DIR 65535
VM_JSR _SetUoMZone_UI_
VM_WORD_DIR 65535
VM_JSR ___INIT___
VM_WORD_DIR 65535

DCL BOOL X dummy
DCL INT X BarPos
DCL INT X IdxMenuMsk
DCL INT X CurrItemNo
DCL INT X IdxImg1
DCL INT X IdxImg2
DCL INT X IdxImg3
DCL INT X MenuItemsNo
DCL UINT X PwdIn
DCL INT X PwdRes
DCL BOOL X EnLogOut
DCL BOOL X EnPwdChgU
DCL BOOL X EnPwdChgS
DCL BOOL X EnPwdChgM
DCL INT X PwdTyp
DCL INT X PwdTypMenu
DCL INT X IdxImgQM
DCL BOOL X ImpExpSel
DCL INT X EnImpExpTmp
DCL INT X LangTime
DCL UINT X Date1
DCL UINT X Date2
DCL UINT X Date3
DCL DINT X BoardTempMsk
DCL INT X EnAlrmExpTmp
DCL BOOL X En_WipeRetain
DCL BOOL X En_WipeNVRAM
DCL BOOL X En_WipeAll
DCL UINT X TimeZoneTmp
DCL INT X SetTimeZoneTmp
DCL DINT X AlrmIdx
DCL DINT X AlrmCode
DCL DINT X AlrmLogsIdx
DCL DINT X AlrmLogCode
DCL USINT X AlrmLogEventType
DCL REAL X AlrmStoredVarReal1
DCL REAL X AlrmStoredVarReal2
DCL BOOL X EnStoredVar1_REAL
DCL BOOL X EnStoredVar2_REAL
DCL DINT X N_Alrms
DCL BOOL X ClrAutoResCounters
DCL BOOL X AlrmLogDelete
DCL BYTE X __SYSVA_TMP_VALUE
DCL INT X __SYSVA_KEY_COUNTER
DCL WORD X __SYSVA_TMP_VALUE
DCL DWORD X __SYSVA_TMP_VALUE
DCL REAL X __SYSVA_TMP_VALUE
DCL BOOL X GeneralMng.DefDone
DCL BOOL EF EnEndDef
DCL BOOL X GeneralMng.EndDefMsk
DCL BOOL EF EnCarelLogo
DCL BOOL X GeneralMng.VerMismatch
DCL BOOL X StartupJmp
DCL DINT EF N_Alrms_Prev
DCL BOOL X GeneralMng.En_Buzz
DCL USINT X __SYSVA_MANUAL_BUZZER_ON
DCL USINT X __SYSVA_MANUAL_BUZZER_OFF
DCL BOOL EF EnCheckAlarm
DCL DINT X GeneralMng.ID_Lang
DCL BOOL EF EnLangChg
DCL BOOL EF EnStartup
DCL INT EF MaskPos
DCL INT EF DTQM
DCL INT EF QUICK_MENU_ITEMS_NO
DCL USINT X __SYSVA_KEY_PRESSED
DCL INT EF DTRetMain
DCL INT EF MAIN_MENU_ITEMS_NO
DCL INT X GeneralMng.DateFormat
DCL UINT X GeneralMng.Day
DCL UINT X GeneralMng.Month
DCL UINT X GeneralMng.Year
DCL INT EF CntDwnPwdTypMenu
DCL BOOL EF En_CheckAlrm_Reset
DCL DINT X AlarmMng.AlrmTime
DCL BOOL X AlarmMng.AlrmResByPGD1
DCL UDINT X GeneralMng.BoardTemp[1]
DCL BOOL EF FirstCycleDone
DCL DINT X STD_UOM_ZONE_UI
DCL BOOL EF KeyAlarmAutorepeatActive
DCL DINT EF AlrmLogsTot
DCL DINT X AlarmMng.AlrmLogTime
DCL DINT EF infoLogOk
DCL DINT EF LastValidRecord
DCL DINT EF AlrmLogsIdxTemp
DCL DINT EF AlrmLogInfoErr
DCL DINT EF AlrmLogCodeTemp
DCL USINT EF AlrmLogEventTypeTemp
DCL DINT EF AlrmLogTimeTemp
DCL INT EF IdxMenuMskTmp
DCL INT EF BarPosTmp
DCL INT EF CurrItemNoTmp
DCL INT EF IdxImg1Tmp
DCL INT EF IdxImg2Tmp
DCL INT EF IdxImg3Tmp
DCL INT EF IdxQM
DCL INT EF IncrTmp
DCL INT EF SETTINGS_MENU_ITEMS_NO
DCL UINT X GeneralMng.Second
DCL UINT X GeneralMng.SecondIn
DCL UINT X GeneralMng.Minute
DCL UINT X GeneralMng.MinuteIn
DCL UINT X GeneralMng.Hour
DCL UINT X GeneralMng.HourIn
DCL UINT X GeneralMng.DayIn
DCL UINT X GeneralMng.MonthIn
DCL UINT X GeneralMng.YearIn
DCL UINT X GeneralMng.Zone_Read
DCL UINT X GeneralMng.PwdUser
DCL UINT X GeneralMng.PwdService
DCL UINT X GeneralMng.PwdManuf
DCL UINT X GeneralMng.PwdPassepartout
DCL UDINT X __SYSVA_TMP_VALUE
DCL BOOL X GeneralMng.WritePwd
DCL BOOL X UnitOn
DCL BOOL X ImpExpMng.En_ParamsImp
DCL BOOL X ImpExpMng.En_ParamsExp
DCL BOOL X GeneralMng.En_AlrmExp
DCL BOOL X GeneralMng.En_Date
DCL BOOL X OnOffUnitMng.KeybOnOff
DCL UDINT X GeneralMng.WipeMem[1]
DCL BOOL X En_WipeMem
DCL UINT X GeneralMng.Zone_Write
DCL BOOL X GeneralMng.SetTimezone
DCL BOOL X GeneralMng.ReadTimezone

; Move_DOWN()
VM_FUNCTION _Move_DOWN_
VM_DATA 0
EF_NEXT_MASK
VM_RTS

; Move_UP()
VM_FUNCTION _Move_UP_
VM_DATA 0
EF_PREVIOUS_MASK
VM_RTS

; BoolSwap()
VM_FUNCTION _BoolSwap_
VM_DATA 0
EF_SWAP
VM_RTS

; SetCurrentValue()
VM_FUNCTION _SetCurrentValue_
VM_DATA 0
EF_COMPARE
EF_NEXT_FIELD
VM_RTS

; Increment_BYTE()
VM_FUNCTION _Increment_BYTE_
VM_DATA 0
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT BYTE
VM_ADD BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_BYTE()
VM_FUNCTION _Decrement_BYTE_
VM_DATA 0
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT BYTE
VM_SUB BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_WORD()
VM_FUNCTION _Increment_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_ADD WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_WORD()
VM_FUNCTION _Decrement_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_SUB WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_DWORD()
VM_FUNCTION _Increment_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_ADD DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_DWORD()
VM_FUNCTION _Decrement_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_SUB DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_1()
VM_FUNCTION _Increment_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_1()
VM_FUNCTION _Decrement_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_2()
VM_FUNCTION _Increment_REAL_2_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 100
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_2()
VM_FUNCTION _Decrement_REAL_2_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 100
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; InstDef()
VM_FUNCTION _InstDef_
VM_DATA 0
; IF
VM_PUSH BOOL X GeneralMng.DefDone
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L1
VM_POP_AWAY BOOL
VM_PUSH BOOL EF EnEndDef
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L1
VM_JZ L0
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnEndDef
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK EndDefault
VM_LABEL L0
; END_IF
; IF
VM_PUSH BOOL X GeneralMng.EndDefMsk
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L3
VM_POP_AWAY BOOL
VM_PUSH BOOL EF EnCarelLogo
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L3
VM_DUP BOOL
VM_JZ L4
VM_POP_AWAY BOOL
VM_PUSH BOOL EF EnEndDef
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_LABEL L4
VM_JZ L2
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnCarelLogo
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK LOGO
VM_LABEL L2
; END_IF
VM_RTS

; CheckAlarm()
VM_FUNCTION _CheckAlarm_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_GT DINT
VM_JZ L7
; THEN
; IF
VM_PUSH BOOL X GeneralMng.En_Buzz
VM_JZ L8
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_LABEL L8
; END_IF
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnCheckAlarm
VM_JUMP L9
VM_LABEL L7
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L11
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_LT DINT
VM_LABEL L11
VM_JZ L10
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_LABEL L10
; END_IF
VM_LABEL L9
VM_PUSH DINT X N_Alrms
VM_POP DINT EF N_Alrms_Prev
VM_RTS

; CarelLogo()
VM_FUNCTION _CarelLogo_
VM_DATA 0
; IF
VM_PUSH DINT X GeneralMng.ID_Lang
VM_PUSH_IMM DINT -1
VM_CMP_EQ DINT
VM_JZ L12
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X GeneralMng.ID_Lang
VM_PUSH_IMM INT 30
VM_POP INT X LangTime
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnLangChg
EF_GOTO_MASK Language
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStartup
VM_LABEL L12
; END_IF
; IF
VM_PUSH BOOL EF EnStartup
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L13
; THEN
VM_PUSH DINT X GeneralMng.ID_Lang
VM_SYSTEM 31
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStartup
EF_GOTO_MASK Main
VM_LABEL L13
; END_IF
VM_RTS

; GotoMain()
VM_FUNCTION _GotoMain_
VM_DATA 0
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnLangChg
EF_GOTO_MASK Main
VM_RTS

; ShowLangMskTime()
VM_FUNCTION _ShowLangMskTime_
VM_DATA 0
VM_PUSH INT X LangTime
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X LangTime
; IF
VM_PUSH INT X LangTime
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L15
VM_POP_AWAY BOOL
VM_PUSH BOOL X GeneralMng.VerMismatch
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L15
VM_DUP BOOL
VM_JZ L16
VM_POP_AWAY BOOL
VM_PUSH BOOL EF EnLangChg
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_LABEL L16
VM_JZ L14
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnLangChg
VM_JSR _GotoMain_
VM_LABEL L14
; END_IF
VM_RTS

; BlinkQuickMenu()
VM_FUNCTION _BlinkQuickMenu_
VM_DATA 0
; IF
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L18
VM_POP_AWAY BOOL
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_PUSH_IMM INT 1
VM_ADD INT
VM_CMP_LT INT
VM_LABEL L18
VM_JZ L17
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTQM
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_ADD INT
VM_POP INT X IdxImgQM
VM_JUMP L19
VM_LABEL L17
; IF
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L21
VM_POP_AWAY BOOL
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_CMP_GT INT
VM_LABEL L21
VM_JZ L20
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTQM
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_SUB INT
VM_POP INT X IdxImgQM
VM_LABEL L20
; END_IF
VM_LABEL L19
VM_RTS

; RetMainMsk()
VM_FUNCTION _RetMainMsk_
VM_DATA 0
; IF
VM_PUSH USINT X __SYSVA_KEY_PRESSED
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L22
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTRetMain
VM_PUSH_IMM INT 30
VM_POP INT X LangTime
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_KEY_PRESSED
VM_JUMP L23
VM_LABEL L22
; IF
VM_PUSH INT EF DTRetMain
VM_PUSH_IMM INT 300
VM_CMP_EQ INT
VM_JZ L24
; THEN
VM_PUSH INT EF MAIN_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
VM_JSR _GotoMain_
VM_LABEL L24
; END_IF
VM_LABEL L23
VM_RTS

; MskDateFormat()
VM_FUNCTION _MskDateFormat_
VM_DATA 0
; CASE
VM_PUSH INT X GeneralMng.DateFormat
; OF
VM_CASE INT 0 L26
VM_CASE INT 1 L27
VM_CASE INT 2 L28
VM_POP_AWAY INT
VM_JUMP L25
VM_LABEL L26
VM_PUSH UINT X GeneralMng.Day
VM_POP UINT X Date1
VM_PUSH UINT X GeneralMng.Month
VM_POP UINT X Date2
VM_PUSH UINT X GeneralMng.Year
VM_POP UINT X Date3
VM_JUMP L25
VM_LABEL L27
VM_PUSH UINT X GeneralMng.Month
VM_POP UINT X Date1
VM_PUSH UINT X GeneralMng.Day
VM_POP UINT X Date2
VM_PUSH UINT X GeneralMng.Year
VM_POP UINT X Date3
VM_JUMP L25
VM_LABEL L28
VM_PUSH UINT X GeneralMng.Year
VM_POP UINT X Date1
VM_PUSH UINT X GeneralMng.Month
VM_POP UINT X Date2
VM_PUSH UINT X GeneralMng.Day
VM_POP UINT X Date3
VM_LABEL L25
VM_RTS

; UsrAccessMenu()
VM_FUNCTION _UsrAccessMenu_
VM_DATA 0
; IF
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 0
VM_CMP_GT INT
VM_JZ L29
; THEN
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF CntDwnPwdTypMenu
VM_JUMP L30
VM_LABEL L29
; IF
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L31
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X PwdTypMenu
VM_LABEL L31
; END_IF
VM_LABEL L30
VM_RTS

; CheckStoredVar_Alrm()
VM_FUNCTION _CheckStoredVar_Alrm_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL X AlrmStoredVarReal1
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L37
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar1_REAL
VM_JUMP L38
VM_LABEL L37
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar1_REAL
; END_IF
VM_LABEL L38
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL X AlrmStoredVarReal2
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L40
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar2_REAL
VM_JUMP L41
VM_LABEL L40
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar2_REAL
; END_IF
VM_LABEL L41
VM_RTS

; CheckActiveAlarm()
VM_FUNCTION _CheckActiveAlarm_
VM_DATA 4
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnCheckAlarm
VM_SYSTEM 32
VM_POP DINT X N_Alrms
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L36
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POPL DINT 0
VM_JSR _CheckStoredVar_Alrm_
EF_GOTO_MASK Alrms_Active
VM_JUMP L43
VM_LABEL L36
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 1
VM_CMP_LE INT
VM_JZ L45
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L46
VM_LABEL L45
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L47
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL X AlarmMng.AlrmResByPGD1
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_LABEL L47
; END_IF
VM_LABEL L46
; END_IF
VM_LABEL L43
VM_RTS

; CheckAlrm_Reset()
VM_FUNCTION _CheckAlrm_Reset_
VM_DATA 0
; IF
VM_PUSH BOOL EF En_CheckAlrm_Reset
VM_JZ L32
; THEN
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L33
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L34
VM_LABEL L33
; ELSE
VM_JSR _CheckActiveAlarm_
; END_IF
VM_LABEL L34
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L32
; END_IF
VM_RTS

; TIMED_LOOP()
VM_FUNCTION _TIMED_LOOP_
VM_DATA 0
VM_JSR _InstDef_
; IF
VM_PUSH BOOL X GeneralMng.VerMismatch
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L6
VM_POP_AWAY BOOL
VM_PUSH BOOL X StartupJmp
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L6
VM_JZ L5
; THEN
VM_JSR _CheckAlarm_
VM_JSR _CarelLogo_
VM_JSR _ShowLangMskTime_
VM_JSR _BlinkQuickMenu_
VM_JSR _RetMainMsk_
VM_JSR _MskDateFormat_
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF DTQM
VM_JSR _UsrAccessMenu_
VM_JSR _CheckAlrm_Reset_
VM_LABEL L5
; END_IF
VM_PUSH_IMM DINT 1
VM_PUSH_IMM UDINT 300
VM_SYSTEM 46
VM_POP_AWAY DINT
VM_PUSH INT EF DTRetMain
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF DTRetMain
VM_PUSH UDINT X GeneralMng.BoardTemp[1]
VM_CAST UDINT DINT
VM_PUSH_IMM DINT 10
VM_DIV DINT
VM_POP DINT X BoardTempMsk
; IF
VM_PUSH BOOL EF FirstCycleDone
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L48
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF FirstCycleDone
VM_PUSH DINT X STD_UOM_ZONE_UI
VM_SYSTEM 49
VM_POP_AWAY DINT
VM_LABEL L48
; END_IF
VM_RTS

; Lang_UP()
VM_FUNCTION _Lang_UP_
VM_DATA 0
; IF
VM_PUSH DINT X GeneralMng.ID_Lang
VM_SYSTEM 27
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_CMP_GE DINT
VM_JZ L49
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X GeneralMng.ID_Lang
VM_JUMP L50
VM_LABEL L49
; ELSE
VM_PUSH DINT X GeneralMng.ID_Lang
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X GeneralMng.ID_Lang
; END_IF
VM_LABEL L50
VM_PUSH DINT X GeneralMng.ID_Lang
VM_SYSTEM 31
VM_POP_AWAY DINT
VM_RTS

; ScrollAlarm_DOWN()
VM_FUNCTION _ScrollAlarm_DOWN_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L53
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L53
VM_JZ L52
; THEN
EF_NEXT_MASK
VM_LABEL L52
; END_IF
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L55
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L55
VM_JZ L54
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L57
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LT DINT
VM_LABEL L57
VM_JZ L56
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmIdx
VM_JUMP L58
VM_LABEL L56
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_GE DINT
VM_JZ L59
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_NEXT_MASK
VM_LABEL L59
; END_IF
VM_LABEL L58
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L60
VM_LABEL L54
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L61
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L61
; END_IF
VM_LABEL L60
VM_RTS

; ScrollAlarm_UP()
VM_FUNCTION _ScrollAlarm_UP_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L62
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_DUP BOOL
VM_JZ L64
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LE DINT
VM_LABEL L64
VM_JZ L63
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmIdx
VM_JUMP L65
VM_LABEL L63
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L66
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_JUMP L67
VM_LABEL L66
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L69
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L69
VM_JZ L68
; THEN
VM_PUSH DINT X N_Alrms
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_LABEL L68
; END_IF
VM_LABEL L67
VM_LABEL L65
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L70
VM_LABEL L62
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L71
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L71
; END_IF
VM_LABEL L70
VM_RTS

; ResetSingleAlarm()
VM_FUNCTION _ResetSingleAlarm_
VM_DATA 0
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JNZ L73
VM_POP_AWAY BOOL
VM_PUSH BOOL EF EnCheckAlarm
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_LABEL L73
VM_JZ L72
; THEN
VM_JSR _CheckActiveAlarm_
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnCheckAlarm
VM_LABEL L72
; END_IF
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L74
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF KeyAlarmAutorepeatActive
VM_JUMP L75
VM_LABEL L74
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_DUP BOOL
VM_JZ L77
VM_POP_AWAY BOOL
VM_PUSH BOOL EF KeyAlarmAutorepeatActive
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L77
VM_JZ L76
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF KeyAlarmAutorepeatActive
VM_PUSH DINT X AlrmIdx
VM_SYSTEM 37
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L76
; END_IF
VM_LABEL L75
VM_RTS

; ResetGlobalAlarm()
VM_FUNCTION _ResetGlobalAlarm_
VM_DATA 0
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L78
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL X AlarmMng.AlrmResByPGD1
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L78
; END_IF
VM_RTS

; CheckStoredVar_Log()
VM_FUNCTION _CheckStoredVar_Log_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL X AlrmStoredVarReal1
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L80
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar1_REAL
VM_JUMP L81
VM_LABEL L80
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar1_REAL
; END_IF
VM_LABEL L81
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL X AlrmStoredVarReal2
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L83
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar2_REAL
VM_JUMP L84
VM_LABEL L83
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar2_REAL
; END_IF
VM_LABEL L84
VM_RTS

; gotoAlarmLog()
VM_FUNCTION _gotoAlarmLog_
VM_DATA 0
VM_SYSTEM 39
VM_POP DINT EF AlrmLogsTot
; IF
VM_PUSH DINT EF AlrmLogsTot
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L79
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF infoLogOk
VM_JSR _CheckStoredVar_Log_
VM_JUMP L86
VM_LABEL L79
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmLogsIdx
VM_PUSH_IMM DINT -1
VM_POP DINT EF infoLogOk
; END_IF
VM_LABEL L86
; IF
VM_PUSH DINT EF infoLogOk
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L88
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF LastValidRecord
EF_GOTO_MASK Alrms_Log
VM_JUMP L89
VM_LABEL L88
; ELSE
EF_GOTO_MASK Alrms_NoLog
; END_IF
VM_LABEL L89
VM_RTS

; ScrollAlarmLog_UP()
VM_FUNCTION _ScrollAlarmLog_UP_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L91
; THEN
EF_BEEP
VM_JUMP L92
VM_LABEL L91
; ELSE
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
; END_IF
VM_LABEL L92
VM_RTS

; ScrollAlarmLog_DOWN()
VM_FUNCTION _ScrollAlarmLog_DOWN_
VM_DATA 0
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_AMP DINT EF AlrmLogCodeTemp
VM_PUSH_AMP USINT EF AlrmLogEventTypeTemp
VM_PUSH_AMP DINT EF AlrmLogTimeTemp
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
; IF
VM_PUSH DINT EF AlrmLogInfoErr
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L94
; THEN
EF_BEEP
VM_JUMP L95
VM_LABEL L94
; ELSE
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 64
VM_CMP_LT DINT
VM_JZ L97
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
VM_JUMP L98
VM_LABEL L97
; ELSE
VM_PUSH_IMM DINT 64
VM_POP DINT X AlrmLogsIdx
EF_BEEP
; END_IF
VM_LABEL L98
; END_IF
VM_LABEL L95
VM_RTS

; DeleteAlarmLog()
VM_FUNCTION _DeleteAlarmLog_
VM_DATA 0
; IF
VM_PUSH BOOL X AlrmLogDelete
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_JZ L100
; THEN
VM_SYSTEM 43
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL X AlrmLogDelete
VM_LABEL L100
; END_IF
EF_NEXT_FIELD
VM_RTS

; RetMainLoop()
VM_FUNCTION _RetMainLoop_
VM_DATA 0
VM_PUSH INT EF IdxMenuMskTmp
VM_POP INT X IdxMenuMsk
VM_PUSH INT EF BarPosTmp
VM_POP INT X BarPos
VM_PUSH INT EF MAIN_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH INT EF CurrItemNoTmp
VM_POP INT X CurrItemNo
VM_PUSH INT EF IdxImg1Tmp
VM_POP INT X IdxImg1
VM_PUSH INT EF IdxImg2Tmp
VM_POP INT X IdxImg2
VM_PUSH INT EF IdxImg3Tmp
VM_POP INT X IdxImg3
EF_GOTO_MASK Menu_Main
VM_RTS

; RetSettingsLoop()
VM_FUNCTION _RetSettingsLoop_
VM_DATA 0
EF_GOTO_MASK Settings
VM_RTS

; GlobalEsc()
VM_FUNCTION _GlobalEsc_
VM_DATA 0
; CASE
VM_PUSH INT EF MaskPos
; OF
VM_CASE INT 0 L103
VM_CASE INT 1 L104
VM_CASE INT 2 L105
VM_CASE INT 3 L106
VM_CASE INT 4 L107
VM_POP_AWAY INT
VM_JUMP L102
VM_LABEL L103
VM_JSR _GotoMain_
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_JUMP L102
VM_LABEL L104
VM_JSR _GotoMain_
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_JUMP L102
VM_LABEL L105
EF_GOTO_MASK Menu_Main
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_JUMP L102
VM_LABEL L106
VM_JSR _RetMainLoop_
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_JUMP L102
VM_LABEL L107
VM_JSR _RetSettingsLoop_
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_LABEL L102
VM_RTS

; ClearAutoResetCounter()
VM_FUNCTION _ClearAutoResetCounter_
VM_DATA 0
; IF
VM_PUSH BOOL X ClrAutoResCounters
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_JZ L101
; THEN
VM_SYSTEM 38
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ClrAutoResCounters
VM_JSR _GlobalEsc_
VM_JUMP L108
VM_LABEL L101
; ELSE
EF_NEXT_FIELD
; END_IF
VM_LABEL L108
VM_RTS

; QuickMenuUP()
VM_FUNCTION _QuickMenuUP_
VM_DATA 0
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IdxQM
; IF
VM_PUSH INT EF IdxQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_CMP_GT INT
VM_JZ L110
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_POP INT EF IdxQM
VM_JUMP L111
VM_LABEL L110
; ELSE
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImgQM
; END_IF
VM_LABEL L111
VM_RTS

; QuickMenuDOWN()
VM_FUNCTION _QuickMenuDOWN_
VM_DATA 0
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF IdxQM
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_CMP_LT INT
VM_JZ L113
; THEN
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_POP INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_POP INT EF IdxQM
VM_JUMP L114
VM_LABEL L113
; ELSE
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImgQM
; END_IF
VM_LABEL L114
VM_RTS

; QuickMenuENT()
VM_FUNCTION _QuickMenuENT_
VM_DATA 0
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
; CASE
VM_PUSH INT EF IdxQM
; OF
VM_CASE INT 1 L117
VM_CASE INT 2 L118
VM_CASE INT 3 L119
VM_CASE INT 4 L120
VM_POP_AWAY INT
VM_JUMP L116
VM_LABEL L117
EF_GOTO_MASK Train
VM_JUMP L116
VM_LABEL L118
EF_GOTO_MASK Teach
VM_JUMP L116
VM_LABEL L119
EF_GOTO_MASK Combine
VM_JUMP L116
VM_LABEL L120
EF_GOTO_MASK SwInfo
VM_LABEL L116
VM_RTS

; GotoMainMenu()
VM_FUNCTION _GotoMainMenu_
VM_DATA 0
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH BOOL X EnLogOut
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L121
; THEN
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM INT 0
VM_POP INT X PwdRes
EF_GOTO_MASK Pwd_LogIn
VM_JUMP L122
VM_LABEL L121
; ELSE
EF_GOTO_MASK Menu_Main
; END_IF
VM_LABEL L122
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_PUSH INT EF MAIN_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_PUSH_IMM INT 5
VM_POP INT EF CntDwnPwdTypMenu
VM_RTS

; SelMainMenu()
VM_FUNCTION _SelMainMenu_
VM_DATA 0
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L125
VM_CASE INT 2 L126
VM_CASE INT 3 L127
VM_CASE INT 4 L128
VM_CASE INT 5 L129
VM_CASE INT 6 L130
VM_CASE INT 7 L131
VM_POP_AWAY INT
VM_JUMP L124
VM_LABEL L125
EF_GOTO_MASK TrainingPool
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_JUMP L124
VM_LABEL L126
EF_GOTO_MASK TeachingPool
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_JUMP L124
VM_LABEL L127
EF_GOTO_MASK CombinedPool
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_JUMP L124
VM_LABEL L128
EF_GOTO_MASK ParamsImpExp
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_JUMP L124
VM_LABEL L129
VM_JSR _gotoAlarmLog_
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_JUMP L124
VM_LABEL L130
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH INT X IdxMenuMsk
VM_POP INT EF IdxMenuMskTmp
VM_PUSH INT X BarPos
VM_POP INT EF BarPosTmp
VM_PUSH INT X CurrItemNo
VM_POP INT EF CurrItemNoTmp
VM_PUSH INT X IdxImg1
VM_POP INT EF IdxImg1Tmp
VM_PUSH INT X IdxImg2
VM_POP INT EF IdxImg2Tmp
VM_PUSH INT X IdxImg3
VM_POP INT EF IdxImg3Tmp
VM_PUSH INT EF SETTINGS_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK Settings
VM_JUMP L124
VM_LABEL L131
EF_GOTO_MASK Pwd_LogOut
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_LABEL L124
VM_RTS

; SelSettingsMenu()
VM_FUNCTION _SelSettingsMenu_
VM_DATA 0
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L133
VM_CASE INT 2 L134
VM_CASE INT 3 L135
VM_CASE INT 4 L136
VM_CASE INT 5 L137
VM_CASE INT 6 L138
VM_POP_AWAY INT
VM_JUMP L132
VM_LABEL L133
EF_GOTO_MASK DateTimeChg
VM_PUSH UINT X GeneralMng.Second
VM_POP UINT X GeneralMng.SecondIn
VM_PUSH UINT X GeneralMng.Minute
VM_POP UINT X GeneralMng.MinuteIn
VM_PUSH UINT X GeneralMng.Hour
VM_POP UINT X GeneralMng.HourIn
VM_PUSH UINT X GeneralMng.Day
VM_POP UINT X GeneralMng.DayIn
VM_PUSH UINT X GeneralMng.Month
VM_POP UINT X GeneralMng.MonthIn
VM_PUSH UINT X GeneralMng.Year
VM_POP UINT X GeneralMng.YearIn
VM_PUSH UINT X GeneralMng.Zone_Read
VM_POP UINT X TimeZoneTmp
VM_JUMP L132
VM_LABEL L134
EF_GOTO_MASK Language
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnLangChg
VM_JUMP L132
VM_LABEL L135
EF_GOTO_MASK SerialPorts
VM_JUMP L132
VM_LABEL L136
EF_GOTO_MASK PwdChg
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_JUMP L132
VM_LABEL L137
EF_GOTO_MASK AlrmInit
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_WipeRetain
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_WipeNVRAM
VM_PUSH_IMM BOOL 0
VM_POP BOOL X En_WipeAll
VM_JUMP L132
VM_LABEL L138
EF_GOTO_MASK UoM_UI
VM_LABEL L132
VM_PUSH_IMM INT 4
VM_POP INT EF MaskPos
VM_RTS

; ScrollMenuDown()
VM_FUNCTION _ScrollMenuDown_
VM_DATA 0
VM_PUSH INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X CurrItemNo
; IF
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_CMP_GT INT
VM_JZ L139
; THEN
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L140
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg2
VM_JUMP L141
VM_LABEL L140
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L142
; THEN
VM_PUSH_IMM INT 2
VM_POP INT X BarPos
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg3
VM_JUMP L143
VM_LABEL L142
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 2
VM_CMP_EQ INT
VM_JZ L144
; THEN
; IF
VM_PUSH INT X IdxMenuMsk
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 3
VM_SUB INT
VM_CMP_LT INT
VM_JZ L145
; THEN
VM_PUSH INT X IdxMenuMsk
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxMenuMsk
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 2
VM_ADD INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 2
VM_ADD INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 2
VM_ADD INT
VM_POP INT X IdxImg3
VM_JUMP L146
VM_LABEL L145
; ELSE
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
; END_IF
VM_LABEL L146
VM_LABEL L144
; END_IF
VM_LABEL L143
VM_LABEL L141
VM_JUMP L148
VM_LABEL L139
; ELSE
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L150
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg2
VM_JUMP L151
VM_LABEL L150
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L152
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_LABEL L152
; END_IF
VM_LABEL L151
; END_IF
VM_LABEL L148
VM_RTS

; ScrollMenuUp()
VM_FUNCTION _ScrollMenuUp_
VM_DATA 0
VM_PUSH INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X CurrItemNo
; IF
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_CMP_GT INT
VM_JZ L153
; THEN
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L154
; THEN
; IF
VM_PUSH INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_CMP_GT INT
VM_JZ L155
; THEN
VM_PUSH INT X IdxMenuMsk
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxMenuMsk
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 2
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 2
VM_SUB INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 2
VM_SUB INT
VM_POP INT X IdxImg3
VM_JUMP L156
VM_LABEL L155
; ELSE
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 3
VM_SUB INT
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 2
VM_POP INT X BarPos
VM_PUSH INT X MenuItemsNo
VM_POP INT X CurrItemNo
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_MUL INT
VM_PUSH_IMM INT 6
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_MUL INT
VM_PUSH_IMM INT 4
VM_SUB INT
VM_POP INT X IdxImg2
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_MUL INT
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg3
; END_IF
VM_LABEL L156
VM_JUMP L158
VM_LABEL L154
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L159
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg2
VM_JUMP L160
VM_LABEL L159
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 2
VM_CMP_EQ INT
VM_JZ L161
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg3
VM_LABEL L161
; END_IF
VM_LABEL L160
VM_LABEL L158
VM_JUMP L162
VM_LABEL L153
; ELSE
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L164
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X MenuItemsNo
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 3
VM_POP INT X IdxImg2
VM_JUMP L165
VM_LABEL L164
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L166
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg2
VM_LABEL L166
; END_IF
VM_LABEL L165
; END_IF
VM_LABEL L162
VM_RTS

; PwdLogIn()
VM_FUNCTION _PwdLogIn_
VM_DATA 0
EF_COMPARE
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IncrTmp
EF_DIGIT_RIGHT
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdUser
VM_CMP_NE UINT
VM_DUP BOOL
VM_JZ L168
VM_POP_AWAY BOOL
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdService
VM_CMP_NE UINT
VM_LABEL L168
VM_DUP BOOL
VM_JZ L169
VM_POP_AWAY BOOL
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdManuf
VM_CMP_NE UINT
VM_LABEL L169
VM_DUP BOOL
VM_JZ L170
VM_POP_AWAY BOOL
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdPassepartout
VM_CMP_NE UINT
VM_LABEL L170
VM_DUP BOOL
VM_JZ L171
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L171
VM_JZ L167
; THEN
VM_PUSH_IMM UDINT 0
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_PUSH_IMM INT 1
VM_POP INT X PwdRes
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
VM_JUMP L172
VM_LABEL L167
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdPassepartout
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L174
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L174
VM_JZ L173
; THEN
VM_PUSH_IMM INT 3
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK Menu_Main
VM_JUMP L175
VM_LABEL L173
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdManuf
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L177
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L177
VM_JZ L176
; THEN
VM_PUSH_IMM INT 3
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK Menu_Main
VM_JUMP L178
VM_LABEL L176
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdService
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L180
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L180
VM_JZ L179
; THEN
VM_PUSH_IMM INT 2
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK Menu_Main
VM_JUMP L181
VM_LABEL L179
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.PwdUser
VM_CMP_EQ UINT
VM_DUP BOOL
VM_JZ L183
VM_POP_AWAY BOOL
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_LABEL L183
VM_JZ L182
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK Menu_Main
VM_LABEL L182
; END_IF
VM_LABEL L181
VM_LABEL L178
VM_LABEL L175
VM_LABEL L172
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_PUSH_IMM INT 5
VM_POP INT EF CntDwnPwdTypMenu
VM_RTS

; PwdLogOut()
VM_FUNCTION _PwdLogOut_
VM_DATA 0
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
VM_PUSH_IMM INT 0
VM_POP INT X PwdTyp
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM INT 0
VM_POP INT X PwdRes
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK Main
VM_RTS

; ChgPwd()
VM_FUNCTION _ChgPwd_
VM_DATA 0
EF_COMPARE
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IncrTmp
; IF
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_GE INT
VM_JZ L184
; THEN
EF_NEXT_FIELD
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.WritePwd
VM_JUMP L185
VM_LABEL L184
; ELSE
EF_DIGIT_RIGHT
; END_IF
VM_LABEL L185
VM_RTS

; DummyService()
VM_FUNCTION _DummyService_
VM_DATA 0
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_EQ INT
VM_DUP BOOL
VM_JNZ L188
VM_POP_AWAY BOOL
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_LABEL L188
VM_JZ L187
; THEN
EF_NEXT_FIELD
VM_JUMP L189
VM_LABEL L187
; ELSE
EF_STORE_MASK
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK InsertService
; END_IF
VM_LABEL L189
VM_RTS

; DummyManuf()
VM_FUNCTION _DummyManuf_
VM_DATA 0
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_JZ L191
; THEN
EF_NEXT_FIELD
VM_JUMP L192
VM_LABEL L191
; ELSE
EF_STORE_MASK
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK InsertManuf
; END_IF
VM_LABEL L192
VM_RTS

; DummyManufOnOff()
VM_FUNCTION _DummyManufOnOff_
VM_DATA 0
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L195
VM_POP_AWAY BOOL
VM_PUSH BOOL X UnitOn
VM_NOT BOOL
VM_LABEL L195
VM_JZ L194
; THEN
EF_NEXT_FIELD
VM_JUMP L196
VM_LABEL L194
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L198
VM_POP_AWAY BOOL
VM_PUSH BOOL X UnitOn
VM_LABEL L198
VM_JZ L197
; THEN
EF_STORE_MASK
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK TurnOffUnit
VM_JUMP L199
VM_LABEL L197
; ELSE
EF_STORE_MASK
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK InsertManuf
; END_IF
VM_LABEL L199
VM_LABEL L196
VM_RTS

; EscDummyService()
VM_FUNCTION _EscDummyService_
VM_DATA 0
EF_RESTORE_MASK
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_RTS

; EscDummyManuf()
VM_FUNCTION _EscDummyManuf_
VM_DATA 0
EF_RESTORE_MASK
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_RTS

; IncrDig()
VM_FUNCTION _IncrDig_
VM_DATA 0
EF_INCR_DIGIT
VM_RTS

; DecrDig()
VM_FUNCTION _DecrDig_
VM_DATA 0
EF_DECR_DIGIT
VM_RTS

; ParamImpExp()
VM_FUNCTION _ParamImpExp_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH BOOL X UnitOn
VM_DUP BOOL
VM_JZ L202
VM_POP_AWAY BOOL
VM_PUSH INT X EnImpExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_LABEL L202
VM_JZ L201
; THEN
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK ParamsImpExpErr
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_PUSH_IMM INT 0
VM_POP INT X EnImpExpTmp
VM_JUMP L203
VM_LABEL L201
; IF
VM_PUSH INT X EnImpExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L205
VM_POP_AWAY BOOL
VM_PUSH BOOL X ImpExpSel
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L205
VM_JZ L204
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ImpExpMng.En_ParamsImp
EF_GOTO_MASK ParamsImpExpRes
VM_PUSH_IMM INT 0
VM_POP INT X EnImpExpTmp
VM_JUMP L206
VM_LABEL L204
; IF
VM_PUSH INT X EnImpExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L208
VM_POP_AWAY BOOL
VM_PUSH BOOL X ImpExpSel
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_LABEL L208
VM_JZ L207
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ImpExpMng.En_ParamsExp
EF_GOTO_MASK ParamsImpExpRes
VM_PUSH_IMM INT 0
VM_POP INT X EnImpExpTmp
VM_JUMP L209
VM_LABEL L207
; ELSE
EF_NEXT_FIELD
; END_IF
VM_LABEL L209
VM_LABEL L206
VM_LABEL L203
VM_RTS

; AlrmExp()
VM_FUNCTION _AlrmExp_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH INT X EnAlrmExpTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L211
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.En_AlrmExp
EF_GOTO_MASK AlrmExpRes
VM_PUSH_IMM INT 0
VM_POP INT X EnAlrmExpTmp
VM_JUMP L212
VM_LABEL L211
; ELSE
EF_NEXT_FIELD
; END_IF
VM_LABEL L212
VM_RTS

; EnDateChg()
VM_FUNCTION _EnDateChg_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.En_Date
EF_COMPARE
EF_NEXT_FIELD
VM_RTS

; TZUp()
VM_FUNCTION _TZUp_
VM_DATA 0
VM_JSR _Increment_WORD_
EF_COMPARE
VM_RTS

; TZDwn()
VM_FUNCTION _TZDwn_
VM_DATA 0
VM_JSR _Decrement_WORD_
EF_COMPARE
VM_RTS

; OnOffSwitch()
VM_FUNCTION _OnOffSwitch_
VM_DATA 0
VM_PUSH BOOL X OnOffUnitMng.KeybOnOff
VM_NOT BOOL
VM_POP BOOL X OnOffUnitMng.KeybOnOff
VM_RTS

; DoNothing()
VM_FUNCTION _DoNothing_
VM_DATA 0
VM_RTS

; WipeMem()
VM_FUNCTION _WipeMem_
VM_DATA 0
; IF
VM_PUSH BOOL X En_WipeRetain
VM_JZ L214
; THEN
VM_PUSH_IMM UDINT 1
VM_POP UDINT X GeneralMng.WipeMem[1]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_WipeMem
VM_LABEL L214
; END_IF
; IF
VM_PUSH BOOL X En_WipeNVRAM
VM_JZ L215
; THEN
VM_PUSH_IMM UDINT 2
VM_POP UDINT X GeneralMng.WipeMem[1]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_WipeMem
VM_LABEL L215
; END_IF
; IF
VM_PUSH BOOL X En_WipeAll
VM_JZ L216
; THEN
VM_PUSH_IMM UDINT 3
VM_POP UDINT X GeneralMng.WipeMem[1]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_WipeMem
VM_LABEL L216
; END_IF
EF_NEXT_FIELD
VM_RTS

; SetTimeZone()
VM_FUNCTION _SetTimeZone_
VM_DATA 0
EF_COMPARE
; IF
VM_PUSH INT X SetTimeZoneTmp
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L217
; THEN
VM_PUSH UINT X TimeZoneTmp
VM_POP UINT X GeneralMng.Zone_Write
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.SetTimezone
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.ReadTimezone
VM_PUSH_IMM INT 0
VM_POP INT X SetTimeZoneTmp
VM_LABEL L217
; END_IF
EF_NEXT_FIELD
VM_RTS

; SetUoMZone_UI()
VM_FUNCTION _SetUoMZone_UI_
VM_DATA 0
EF_COMPARE
VM_PUSH DINT X STD_UOM_ZONE_UI
VM_SYSTEM 49
VM_POP_AWAY DINT
EF_NEXT_FIELD
VM_RTS

; __INIT__()
VM_FUNCTION ___INIT___
VM_DATA 0
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
VM_PUSH_IMM INT 1
VM_POP INT X IdxImgQM
VM_PUSH_IMM INT 3
VM_POP INT EF QUICK_MENU_ITEMS_NO
VM_PUSH_IMM INT 7
VM_POP INT EF MAIN_MENU_ITEMS_NO
VM_PUSH_IMM INT 1
VM_POP INT EF IdxQM
VM_PUSH_IMM INT 6
VM_POP INT EF SETTINGS_MENU_ITEMS_NO
VM_RTS
